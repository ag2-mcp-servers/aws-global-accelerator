# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:38:43+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, confloat, conint, constr


class AcceleratorNotDisabledException(RootModel[Any]):
    root: Any


class AcceleratorNotFoundException(RootModel[Any]):
    root: Any


class AcceleratorStatus(Enum):
    DEPLOYED = 'DEPLOYED'
    IN_PROGRESS = 'IN_PROGRESS'


class AccessDeniedException(RootModel[Any]):
    root: Any


class AssociatedEndpointGroupFoundException(RootModel[Any]):
    root: Any


class AssociatedListenerFoundException(RootModel[Any]):
    root: Any


class ByoipCidrNotFoundException(RootModel[Any]):
    root: Any


class ByoipCidrState(Enum):
    PENDING_PROVISIONING = 'PENDING_PROVISIONING'
    READY = 'READY'
    PENDING_ADVERTISING = 'PENDING_ADVERTISING'
    ADVERTISING = 'ADVERTISING'
    PENDING_WITHDRAWING = 'PENDING_WITHDRAWING'
    PENDING_DEPROVISIONING = 'PENDING_DEPROVISIONING'
    DEPROVISIONED = 'DEPROVISIONED'
    FAILED_PROVISION = 'FAILED_PROVISION'
    FAILED_ADVERTISING = 'FAILED_ADVERTISING'
    FAILED_WITHDRAW = 'FAILED_WITHDRAW'
    FAILED_DEPROVISION = 'FAILED_DEPROVISION'


class ClientAffinity(Enum):
    NONE = 'NONE'
    SOURCE_IP = 'SOURCE_IP'


class ConflictException(RootModel[Any]):
    root: Any


class CustomRoutingAcceleratorStatus(Enum):
    DEPLOYED = 'DEPLOYED'
    IN_PROGRESS = 'IN_PROGRESS'


class CustomRoutingDestinationTrafficState(Enum):
    ALLOW = 'ALLOW'
    DENY = 'DENY'


class CustomRoutingProtocol(Enum):
    TCP = 'TCP'
    UDP = 'UDP'


class CustomRoutingProtocols(RootModel[List[CustomRoutingProtocol]]):
    root: List[CustomRoutingProtocol] = Field(..., max_length=2, min_length=1)


class EndpointAlreadyExistsException(RootModel[Any]):
    root: Any


class EndpointGroupAlreadyExistsException(RootModel[Any]):
    root: Any


class EndpointGroupNotFoundException(RootModel[Any]):
    root: Any


class EndpointNotFoundException(RootModel[Any]):
    root: Any


class EndpointWeight(RootModel[conint(ge=0, le=255)]):
    root: conint(ge=0, le=255)


class GenericBoolean(RootModel[bool]):
    root: bool


class GenericString(RootModel[constr(max_length=255)]):
    root: constr(max_length=255)


class HealthCheckIntervalSeconds(RootModel[conint(ge=10, le=30)]):
    root: conint(ge=10, le=30)


class HealthCheckPath(
    RootModel[constr(pattern=r'^/[-a-zA-Z0-9@:%_\\+.~#?&/=]*$', max_length=255)]
):
    root: constr(pattern=r'^/[-a-zA-Z0-9@:%_\\+.~#?&/=]*$', max_length=255)


class HealthCheckPort(RootModel[conint(ge=1, le=65535)]):
    root: conint(ge=1, le=65535)


class HealthCheckProtocol(Enum):
    TCP = 'TCP'
    HTTP = 'HTTP'
    HTTPS = 'HTTPS'


class HealthState(Enum):
    INITIAL = 'INITIAL'
    HEALTHY = 'HEALTHY'
    UNHEALTHY = 'UNHEALTHY'


class IdempotencyToken(RootModel[constr(max_length=255)]):
    root: constr(max_length=255)


class IncorrectCidrStateException(RootModel[Any]):
    root: Any


class InternalServiceErrorException(RootModel[Any]):
    root: Any


class InvalidArgumentException(RootModel[Any]):
    root: Any


class InvalidNextTokenException(RootModel[Any]):
    root: Any


class InvalidPortRangeException(RootModel[Any]):
    root: Any


class IpAddress(RootModel[constr(max_length=45)]):
    root: constr(max_length=45)


class IpAddressFamily(Enum):
    IPv4 = 'IPv4'
    IPv6 = 'IPv6'


class IpAddressType(Enum):
    IPV4 = 'IPV4'
    DUAL_STACK = 'DUAL_STACK'


class IpAddresses(RootModel[List[IpAddress]]):
    root: List[IpAddress] = Field(..., max_length=2, min_length=0)


class IpSet(BaseModel):
    IpAddressFamily_1: Optional[IpAddressFamily] = Field(None, alias='IpAddressFamily')
    IpAddresses_1: Optional[IpAddresses] = Field(None, alias='IpAddresses')
    IpFamily: Optional[GenericString] = None


class IpSets(RootModel[List[IpSet]]):
    root: List[IpSet]


class LimitExceededException(RootModel[Any]):
    root: Any


class ListenerNotFoundException(RootModel[Any]):
    root: Any


class MaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class PortMappingsMaxResults(RootModel[conint(ge=1, le=20000)]):
    root: conint(ge=1, le=20000)


class PortNumber(RootModel[conint(ge=1, le=65535)]):
    root: conint(ge=1, le=65535)


class PortOverride(BaseModel):
    EndpointPort: Optional[PortNumber] = None
    ListenerPort: Optional[PortNumber] = None


class PortOverrides(RootModel[List[PortOverride]]):
    root: List[PortOverride] = Field(..., max_length=10, min_length=0)


class PortRange(BaseModel):
    FromPort: Optional[PortNumber] = None
    ToPort: Optional[PortNumber] = None


class PortRanges(RootModel[List[PortRange]]):
    root: List[PortRange] = Field(..., max_length=10, min_length=1)


class Protocol(Enum):
    TCP = 'TCP'
    UDP = 'UDP'


class Protocols(RootModel[List[Protocol]]):
    root: List[Protocol]


class ResourceArn(RootModel[constr(min_length=1, max_length=1011)]):
    root: constr(min_length=1, max_length=1011)


class SocketAddress(BaseModel):
    IpAddress: Optional[GenericString] = None
    Port: Optional[PortNumber] = None


class SocketAddresses(RootModel[List[SocketAddress]]):
    root: List[SocketAddress]


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=0)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class ThresholdCount(RootModel[conint(ge=1, le=10)]):
    root: conint(ge=1, le=10)


class Timestamp(RootModel[datetime]):
    root: datetime


class TrafficDialPercentage(RootModel[confloat(ge=0.0, le=100.0)]):
    root: confloat(ge=0.0, le=100.0)


class TransactionInProgressException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')
    TagKeys_1: TagKeys = Field(..., alias='TagKeys')


class UntagResourceResponse(BaseModel):
    pass


class UpdateAcceleratorAttributesRequest(BaseModel):
    AcceleratorArn: GenericString
    FlowLogsEnabled: Optional[GenericBoolean] = None
    FlowLogsS3Bucket: Optional[GenericString] = None
    FlowLogsS3Prefix: Optional[GenericString] = None


class UpdateAcceleratorRequest(BaseModel):
    AcceleratorArn: GenericString
    Enabled: Optional[GenericBoolean] = None
    IpAddressType_1: Optional[IpAddressType] = Field(None, alias='IpAddressType')
    Name: Optional[GenericString] = None


class UpdateCustomRoutingAcceleratorAttributesRequest(BaseModel):
    AcceleratorArn: GenericString
    FlowLogsEnabled: Optional[GenericBoolean] = None
    FlowLogsS3Bucket: Optional[GenericString] = None
    FlowLogsS3Prefix: Optional[GenericString] = None


class UpdateCustomRoutingAcceleratorRequest(BaseModel):
    AcceleratorArn: GenericString
    Enabled: Optional[GenericBoolean] = None
    IpAddressType_1: Optional[IpAddressType] = Field(None, alias='IpAddressType')
    Name: Optional[GenericString] = None


class UpdateCustomRoutingListenerRequest(BaseModel):
    ListenerArn: GenericString
    PortRanges_1: PortRanges = Field(..., alias='PortRanges')


class UpdateListenerRequest(BaseModel):
    ClientAffinity_1: Optional[ClientAffinity] = Field(None, alias='ClientAffinity')
    ListenerArn: GenericString
    PortRanges_1: Optional[PortRanges] = Field(None, alias='PortRanges')
    Protocol_1: Optional[Protocol] = Field(None, alias='Protocol')


class WithdrawByoipCidrRequest(BaseModel):
    Cidr: GenericString


class XAmzTarget(Enum):
    GlobalAccelerator_V20180706_AddCustomRoutingEndpoints = (
        'GlobalAccelerator_V20180706.AddCustomRoutingEndpoints'
    )


class XAmzTarget1(Enum):
    GlobalAccelerator_V20180706_AddEndpoints = (
        'GlobalAccelerator_V20180706.AddEndpoints'
    )


class XAmzTarget2(Enum):
    GlobalAccelerator_V20180706_AdvertiseByoipCidr = (
        'GlobalAccelerator_V20180706.AdvertiseByoipCidr'
    )


class XAmzTarget3(Enum):
    GlobalAccelerator_V20180706_AllowCustomRoutingTraffic = (
        'GlobalAccelerator_V20180706.AllowCustomRoutingTraffic'
    )


class XAmzTarget4(Enum):
    GlobalAccelerator_V20180706_CreateAccelerator = (
        'GlobalAccelerator_V20180706.CreateAccelerator'
    )


class XAmzTarget5(Enum):
    GlobalAccelerator_V20180706_CreateCustomRoutingAccelerator = (
        'GlobalAccelerator_V20180706.CreateCustomRoutingAccelerator'
    )


class XAmzTarget6(Enum):
    GlobalAccelerator_V20180706_CreateCustomRoutingEndpointGroup = (
        'GlobalAccelerator_V20180706.CreateCustomRoutingEndpointGroup'
    )


class XAmzTarget7(Enum):
    GlobalAccelerator_V20180706_CreateCustomRoutingListener = (
        'GlobalAccelerator_V20180706.CreateCustomRoutingListener'
    )


class XAmzTarget8(Enum):
    GlobalAccelerator_V20180706_CreateEndpointGroup = (
        'GlobalAccelerator_V20180706.CreateEndpointGroup'
    )


class XAmzTarget9(Enum):
    GlobalAccelerator_V20180706_CreateListener = (
        'GlobalAccelerator_V20180706.CreateListener'
    )


class XAmzTarget10(Enum):
    GlobalAccelerator_V20180706_DeleteAccelerator = (
        'GlobalAccelerator_V20180706.DeleteAccelerator'
    )


class XAmzTarget11(Enum):
    GlobalAccelerator_V20180706_DeleteCustomRoutingAccelerator = (
        'GlobalAccelerator_V20180706.DeleteCustomRoutingAccelerator'
    )


class XAmzTarget12(Enum):
    GlobalAccelerator_V20180706_DeleteCustomRoutingEndpointGroup = (
        'GlobalAccelerator_V20180706.DeleteCustomRoutingEndpointGroup'
    )


class XAmzTarget13(Enum):
    GlobalAccelerator_V20180706_DeleteCustomRoutingListener = (
        'GlobalAccelerator_V20180706.DeleteCustomRoutingListener'
    )


class XAmzTarget14(Enum):
    GlobalAccelerator_V20180706_DeleteEndpointGroup = (
        'GlobalAccelerator_V20180706.DeleteEndpointGroup'
    )


class XAmzTarget15(Enum):
    GlobalAccelerator_V20180706_DeleteListener = (
        'GlobalAccelerator_V20180706.DeleteListener'
    )


class XAmzTarget16(Enum):
    GlobalAccelerator_V20180706_DenyCustomRoutingTraffic = (
        'GlobalAccelerator_V20180706.DenyCustomRoutingTraffic'
    )


class XAmzTarget17(Enum):
    GlobalAccelerator_V20180706_DeprovisionByoipCidr = (
        'GlobalAccelerator_V20180706.DeprovisionByoipCidr'
    )


class XAmzTarget18(Enum):
    GlobalAccelerator_V20180706_DescribeAccelerator = (
        'GlobalAccelerator_V20180706.DescribeAccelerator'
    )


class XAmzTarget19(Enum):
    GlobalAccelerator_V20180706_DescribeAcceleratorAttributes = (
        'GlobalAccelerator_V20180706.DescribeAcceleratorAttributes'
    )


class XAmzTarget20(Enum):
    GlobalAccelerator_V20180706_DescribeCustomRoutingAccelerator = (
        'GlobalAccelerator_V20180706.DescribeCustomRoutingAccelerator'
    )


class XAmzTarget21(Enum):
    GlobalAccelerator_V20180706_DescribeCustomRoutingAcceleratorAttributes = (
        'GlobalAccelerator_V20180706.DescribeCustomRoutingAcceleratorAttributes'
    )


class XAmzTarget22(Enum):
    GlobalAccelerator_V20180706_DescribeCustomRoutingEndpointGroup = (
        'GlobalAccelerator_V20180706.DescribeCustomRoutingEndpointGroup'
    )


class XAmzTarget23(Enum):
    GlobalAccelerator_V20180706_DescribeCustomRoutingListener = (
        'GlobalAccelerator_V20180706.DescribeCustomRoutingListener'
    )


class XAmzTarget24(Enum):
    GlobalAccelerator_V20180706_DescribeEndpointGroup = (
        'GlobalAccelerator_V20180706.DescribeEndpointGroup'
    )


class XAmzTarget25(Enum):
    GlobalAccelerator_V20180706_DescribeListener = (
        'GlobalAccelerator_V20180706.DescribeListener'
    )


class XAmzTarget26(Enum):
    GlobalAccelerator_V20180706_ListAccelerators = (
        'GlobalAccelerator_V20180706.ListAccelerators'
    )


class XAmzTarget27(Enum):
    GlobalAccelerator_V20180706_ListByoipCidrs = (
        'GlobalAccelerator_V20180706.ListByoipCidrs'
    )


class XAmzTarget28(Enum):
    GlobalAccelerator_V20180706_ListCustomRoutingAccelerators = (
        'GlobalAccelerator_V20180706.ListCustomRoutingAccelerators'
    )


class XAmzTarget29(Enum):
    GlobalAccelerator_V20180706_ListCustomRoutingEndpointGroups = (
        'GlobalAccelerator_V20180706.ListCustomRoutingEndpointGroups'
    )


class XAmzTarget30(Enum):
    GlobalAccelerator_V20180706_ListCustomRoutingListeners = (
        'GlobalAccelerator_V20180706.ListCustomRoutingListeners'
    )


class XAmzTarget31(Enum):
    GlobalAccelerator_V20180706_ListCustomRoutingPortMappings = (
        'GlobalAccelerator_V20180706.ListCustomRoutingPortMappings'
    )


class XAmzTarget32(Enum):
    GlobalAccelerator_V20180706_ListCustomRoutingPortMappingsByDestination = (
        'GlobalAccelerator_V20180706.ListCustomRoutingPortMappingsByDestination'
    )


class XAmzTarget33(Enum):
    GlobalAccelerator_V20180706_ListEndpointGroups = (
        'GlobalAccelerator_V20180706.ListEndpointGroups'
    )


class XAmzTarget34(Enum):
    GlobalAccelerator_V20180706_ListListeners = (
        'GlobalAccelerator_V20180706.ListListeners'
    )


class XAmzTarget35(Enum):
    GlobalAccelerator_V20180706_ListTagsForResource = (
        'GlobalAccelerator_V20180706.ListTagsForResource'
    )


class XAmzTarget36(Enum):
    GlobalAccelerator_V20180706_ProvisionByoipCidr = (
        'GlobalAccelerator_V20180706.ProvisionByoipCidr'
    )


class XAmzTarget37(Enum):
    GlobalAccelerator_V20180706_RemoveCustomRoutingEndpoints = (
        'GlobalAccelerator_V20180706.RemoveCustomRoutingEndpoints'
    )


class XAmzTarget38(Enum):
    GlobalAccelerator_V20180706_RemoveEndpoints = (
        'GlobalAccelerator_V20180706.RemoveEndpoints'
    )


class XAmzTarget39(Enum):
    GlobalAccelerator_V20180706_TagResource = 'GlobalAccelerator_V20180706.TagResource'


class XAmzTarget40(Enum):
    GlobalAccelerator_V20180706_UntagResource = (
        'GlobalAccelerator_V20180706.UntagResource'
    )


class XAmzTarget41(Enum):
    GlobalAccelerator_V20180706_UpdateAccelerator = (
        'GlobalAccelerator_V20180706.UpdateAccelerator'
    )


class XAmzTarget42(Enum):
    GlobalAccelerator_V20180706_UpdateAcceleratorAttributes = (
        'GlobalAccelerator_V20180706.UpdateAcceleratorAttributes'
    )


class XAmzTarget43(Enum):
    GlobalAccelerator_V20180706_UpdateCustomRoutingAccelerator = (
        'GlobalAccelerator_V20180706.UpdateCustomRoutingAccelerator'
    )


class XAmzTarget44(Enum):
    GlobalAccelerator_V20180706_UpdateCustomRoutingAcceleratorAttributes = (
        'GlobalAccelerator_V20180706.UpdateCustomRoutingAcceleratorAttributes'
    )


class XAmzTarget45(Enum):
    GlobalAccelerator_V20180706_UpdateCustomRoutingListener = (
        'GlobalAccelerator_V20180706.UpdateCustomRoutingListener'
    )


class XAmzTarget46(Enum):
    GlobalAccelerator_V20180706_UpdateEndpointGroup = (
        'GlobalAccelerator_V20180706.UpdateEndpointGroup'
    )


class XAmzTarget47(Enum):
    GlobalAccelerator_V20180706_UpdateListener = (
        'GlobalAccelerator_V20180706.UpdateListener'
    )


class XAmzTarget48(Enum):
    GlobalAccelerator_V20180706_WithdrawByoipCidr = (
        'GlobalAccelerator_V20180706.WithdrawByoipCidr'
    )


class AcceleratorAttributes(BaseModel):
    FlowLogsEnabled: Optional[GenericBoolean] = None
    FlowLogsS3Bucket: Optional[GenericString] = None
    FlowLogsS3Prefix: Optional[GenericString] = None


class AcceleratorEvent(BaseModel):
    Message: Optional[GenericString] = None
    Timestamp_1: Optional[Timestamp] = Field(None, alias='Timestamp')


class AcceleratorEvents(RootModel[List[AcceleratorEvent]]):
    root: List[AcceleratorEvent]


class AdvertiseByoipCidrRequest(BaseModel):
    Cidr: GenericString


class ByoipCidrEvent(BaseModel):
    Message: Optional[GenericString] = None
    Timestamp_1: Optional[Timestamp] = Field(None, alias='Timestamp')


class ByoipCidrEvents(RootModel[List[ByoipCidrEvent]]):
    root: List[ByoipCidrEvent]


class CidrAuthorizationContext(BaseModel):
    Message: GenericString
    Signature: GenericString


class CreateCustomRoutingListenerRequest(BaseModel):
    AcceleratorArn: GenericString
    IdempotencyToken_1: IdempotencyToken = Field(..., alias='IdempotencyToken')
    PortRanges_1: PortRanges = Field(..., alias='PortRanges')


class CreateListenerRequest(BaseModel):
    AcceleratorArn: GenericString
    ClientAffinity_1: Optional[ClientAffinity] = Field(None, alias='ClientAffinity')
    IdempotencyToken_1: IdempotencyToken = Field(..., alias='IdempotencyToken')
    PortRanges_1: PortRanges = Field(..., alias='PortRanges')
    Protocol_1: Protocol = Field(..., alias='Protocol')


class CustomRoutingAccelerator(BaseModel):
    AcceleratorArn: Optional[GenericString] = None
    CreatedTime: Optional[Timestamp] = None
    DnsName: Optional[GenericString] = None
    Enabled: Optional[GenericBoolean] = None
    IpAddressType_1: Optional[IpAddressType] = Field(None, alias='IpAddressType')
    IpSets_1: Optional[IpSets] = Field(None, alias='IpSets')
    LastModifiedTime: Optional[Timestamp] = None
    Name: Optional[GenericString] = None
    Status: Optional[CustomRoutingAcceleratorStatus] = None


class CustomRoutingAcceleratorAttributes(BaseModel):
    FlowLogsEnabled: Optional[GenericBoolean] = None
    FlowLogsS3Bucket: Optional[GenericString] = None
    FlowLogsS3Prefix: Optional[GenericString] = None


class CustomRoutingAccelerators(RootModel[List[CustomRoutingAccelerator]]):
    root: List[CustomRoutingAccelerator]


class CustomRoutingDestinationConfiguration(BaseModel):
    FromPort: PortNumber
    Protocols: CustomRoutingProtocols
    ToPort: PortNumber


class CustomRoutingDestinationConfigurations(
    RootModel[List[CustomRoutingDestinationConfiguration]]
):
    root: List[CustomRoutingDestinationConfiguration] = Field(
        ..., max_length=100, min_length=1
    )


class CustomRoutingDestinationDescription(BaseModel):
    FromPort: Optional[PortNumber] = None
    Protocols_1: Optional[Protocols] = Field(None, alias='Protocols')
    ToPort: Optional[PortNumber] = None


class CustomRoutingDestinationDescriptions(
    RootModel[List[CustomRoutingDestinationDescription]]
):
    root: List[CustomRoutingDestinationDescription]


class CustomRoutingEndpointConfiguration(BaseModel):
    EndpointId: Optional[GenericString] = None


class CustomRoutingEndpointConfigurations(
    RootModel[List[CustomRoutingEndpointConfiguration]]
):
    root: List[CustomRoutingEndpointConfiguration] = Field(
        ..., max_length=20, min_length=1
    )


class CustomRoutingEndpointDescription(BaseModel):
    EndpointId: Optional[GenericString] = None


class CustomRoutingEndpointDescriptions(
    RootModel[List[CustomRoutingEndpointDescription]]
):
    root: List[CustomRoutingEndpointDescription]


class CustomRoutingEndpointGroup(BaseModel):
    DestinationDescriptions: Optional[CustomRoutingDestinationDescriptions] = None
    EndpointDescriptions: Optional[CustomRoutingEndpointDescriptions] = None
    EndpointGroupArn: Optional[GenericString] = None
    EndpointGroupRegion: Optional[GenericString] = None


class CustomRoutingEndpointGroups(RootModel[List[CustomRoutingEndpointGroup]]):
    root: List[CustomRoutingEndpointGroup]


class CustomRoutingListener(BaseModel):
    ListenerArn: Optional[GenericString] = None
    PortRanges_1: Optional[PortRanges] = Field(None, alias='PortRanges')


class CustomRoutingListeners(RootModel[List[CustomRoutingListener]]):
    root: List[CustomRoutingListener]


class DeleteAcceleratorRequest(BaseModel):
    AcceleratorArn: GenericString


class DeleteCustomRoutingAcceleratorRequest(BaseModel):
    AcceleratorArn: GenericString


class DeleteCustomRoutingEndpointGroupRequest(BaseModel):
    EndpointGroupArn: GenericString


class DeleteCustomRoutingListenerRequest(BaseModel):
    ListenerArn: GenericString


class DeleteEndpointGroupRequest(BaseModel):
    EndpointGroupArn: GenericString


class DeleteListenerRequest(BaseModel):
    ListenerArn: GenericString


class DeprovisionByoipCidrRequest(BaseModel):
    Cidr: GenericString


class DescribeAcceleratorAttributesRequest(BaseModel):
    AcceleratorArn: GenericString


class DescribeAcceleratorAttributesResponse(BaseModel):
    AcceleratorAttributes_1: Optional[AcceleratorAttributes] = Field(
        None, alias='AcceleratorAttributes'
    )


class DescribeAcceleratorRequest(BaseModel):
    AcceleratorArn: GenericString


class DescribeCustomRoutingAcceleratorAttributesRequest(BaseModel):
    AcceleratorArn: GenericString


class DescribeCustomRoutingAcceleratorAttributesResponse(BaseModel):
    AcceleratorAttributes: Optional[CustomRoutingAcceleratorAttributes] = None


class DescribeCustomRoutingAcceleratorRequest(BaseModel):
    AcceleratorArn: GenericString


class DescribeCustomRoutingAcceleratorResponse(BaseModel):
    Accelerator: Optional[CustomRoutingAccelerator] = None


class DescribeCustomRoutingEndpointGroupRequest(BaseModel):
    EndpointGroupArn: GenericString


class DescribeCustomRoutingEndpointGroupResponse(BaseModel):
    EndpointGroup: Optional[CustomRoutingEndpointGroup] = None


class DescribeCustomRoutingListenerRequest(BaseModel):
    ListenerArn: GenericString


class DescribeCustomRoutingListenerResponse(BaseModel):
    Listener: Optional[CustomRoutingListener] = None


class DescribeEndpointGroupRequest(BaseModel):
    EndpointGroupArn: GenericString


class DescribeListenerRequest(BaseModel):
    ListenerArn: GenericString


class DestinationAddresses(RootModel[List[IpAddress]]):
    root: List[IpAddress] = Field(..., max_length=100)


class DestinationPortMapping(BaseModel):
    AcceleratorArn: Optional[GenericString] = None
    AcceleratorSocketAddresses: Optional[SocketAddresses] = None
    DestinationSocketAddress: Optional[SocketAddress] = None
    DestinationTrafficState: Optional[CustomRoutingDestinationTrafficState] = None
    EndpointGroupArn: Optional[GenericString] = None
    EndpointGroupRegion: Optional[GenericString] = None
    EndpointId: Optional[GenericString] = None
    IpAddressType_1: Optional[IpAddressType] = Field(None, alias='IpAddressType')


class DestinationPortMappings(RootModel[List[DestinationPortMapping]]):
    root: List[DestinationPortMapping]


class DestinationPorts(RootModel[List[PortNumber]]):
    root: List[PortNumber] = Field(..., max_length=100)


class EndpointConfiguration(BaseModel):
    ClientIPPreservationEnabled: Optional[GenericBoolean] = None
    EndpointId: Optional[GenericString] = None
    Weight: Optional[EndpointWeight] = None


class EndpointConfigurations(RootModel[List[EndpointConfiguration]]):
    root: List[EndpointConfiguration] = Field(..., max_length=10, min_length=0)


class EndpointDescription(BaseModel):
    ClientIPPreservationEnabled: Optional[GenericBoolean] = None
    EndpointId: Optional[GenericString] = None
    HealthReason: Optional[GenericString] = None
    HealthState_1: Optional[HealthState] = Field(None, alias='HealthState')
    Weight: Optional[EndpointWeight] = None


class EndpointDescriptions(RootModel[List[EndpointDescription]]):
    root: List[EndpointDescription]


class EndpointGroup(BaseModel):
    EndpointDescriptions_1: Optional[EndpointDescriptions] = Field(
        None, alias='EndpointDescriptions'
    )
    EndpointGroupArn: Optional[GenericString] = None
    EndpointGroupRegion: Optional[GenericString] = None
    HealthCheckIntervalSeconds_1: Optional[HealthCheckIntervalSeconds] = Field(
        None, alias='HealthCheckIntervalSeconds'
    )
    HealthCheckPath_1: Optional[HealthCheckPath] = Field(None, alias='HealthCheckPath')
    HealthCheckPort_1: Optional[HealthCheckPort] = Field(None, alias='HealthCheckPort')
    HealthCheckProtocol_1: Optional[HealthCheckProtocol] = Field(
        None, alias='HealthCheckProtocol'
    )
    PortOverrides_1: Optional[PortOverrides] = Field(None, alias='PortOverrides')
    ThresholdCount_1: Optional[ThresholdCount] = Field(None, alias='ThresholdCount')
    TrafficDialPercentage_1: Optional[TrafficDialPercentage] = Field(
        None, alias='TrafficDialPercentage'
    )


class EndpointGroups(RootModel[List[EndpointGroup]]):
    root: List[EndpointGroup]


class EndpointIdentifier(BaseModel):
    ClientIPPreservationEnabled: Optional[GenericBoolean] = None
    EndpointId: GenericString


class EndpointIdentifiers(RootModel[List[EndpointIdentifier]]):
    root: List[EndpointIdentifier] = Field(..., max_length=10, min_length=1)


class EndpointIds(RootModel[List[GenericString]]):
    root: List[GenericString]


class ListAcceleratorsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[GenericString] = None


class ListByoipCidrsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[GenericString] = None


class ListCustomRoutingAcceleratorsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[GenericString] = None


class ListCustomRoutingAcceleratorsResponse(BaseModel):
    Accelerators: Optional[CustomRoutingAccelerators] = None
    NextToken: Optional[GenericString] = None


class ListCustomRoutingEndpointGroupsRequest(BaseModel):
    ListenerArn: GenericString
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[GenericString] = None


class ListCustomRoutingEndpointGroupsResponse(BaseModel):
    EndpointGroups: Optional[CustomRoutingEndpointGroups] = None
    NextToken: Optional[GenericString] = None


class ListCustomRoutingListenersRequest(BaseModel):
    AcceleratorArn: GenericString
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[GenericString] = None


class ListCustomRoutingListenersResponse(BaseModel):
    Listeners: Optional[CustomRoutingListeners] = None
    NextToken: Optional[GenericString] = None


class ListCustomRoutingPortMappingsByDestinationRequest(BaseModel):
    DestinationAddress: GenericString
    EndpointId: GenericString
    MaxResults: Optional[PortMappingsMaxResults] = None
    NextToken: Optional[GenericString] = None


class ListCustomRoutingPortMappingsByDestinationResponse(BaseModel):
    DestinationPortMappings_1: Optional[DestinationPortMappings] = Field(
        None, alias='DestinationPortMappings'
    )
    NextToken: Optional[GenericString] = None


class ListCustomRoutingPortMappingsRequest(BaseModel):
    AcceleratorArn: GenericString
    EndpointGroupArn: Optional[GenericString] = None
    MaxResults: Optional[PortMappingsMaxResults] = None
    NextToken: Optional[GenericString] = None


class ListEndpointGroupsRequest(BaseModel):
    ListenerArn: GenericString
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[GenericString] = None


class ListEndpointGroupsResponse(BaseModel):
    EndpointGroups_1: Optional[EndpointGroups] = Field(None, alias='EndpointGroups')
    NextToken: Optional[GenericString] = None


class ListListenersRequest(BaseModel):
    AcceleratorArn: GenericString
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[GenericString] = None


class ListTagsForResourceRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class Listener(BaseModel):
    ClientAffinity_1: Optional[ClientAffinity] = Field(None, alias='ClientAffinity')
    ListenerArn: Optional[GenericString] = None
    PortRanges_1: Optional[PortRanges] = Field(None, alias='PortRanges')
    Protocol_1: Optional[Protocol] = Field(None, alias='Protocol')


class Listeners(RootModel[List[Listener]]):
    root: List[Listener]


class PortMapping(BaseModel):
    AcceleratorPort: Optional[PortNumber] = None
    DestinationSocketAddress: Optional[SocketAddress] = None
    DestinationTrafficState: Optional[CustomRoutingDestinationTrafficState] = None
    EndpointGroupArn: Optional[GenericString] = None
    EndpointId: Optional[GenericString] = None
    Protocols: Optional[CustomRoutingProtocols] = None


class PortMappings(RootModel[List[PortMapping]]):
    root: List[PortMapping]


class ProvisionByoipCidrRequest(BaseModel):
    Cidr: GenericString
    CidrAuthorizationContext_1: CidrAuthorizationContext = Field(
        ..., alias='CidrAuthorizationContext'
    )


class RemoveCustomRoutingEndpointsRequest(BaseModel):
    EndpointGroupArn: GenericString
    EndpointIds_1: EndpointIds = Field(..., alias='EndpointIds')


class RemoveEndpointsRequest(BaseModel):
    EndpointGroupArn: GenericString
    EndpointIdentifiers_1: EndpointIdentifiers = Field(..., alias='EndpointIdentifiers')


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class Tags(RootModel[List[Tag]]):
    root: List[Tag]


class UpdateAcceleratorAttributesResponse(BaseModel):
    AcceleratorAttributes_1: Optional[AcceleratorAttributes] = Field(
        None, alias='AcceleratorAttributes'
    )


class UpdateCustomRoutingAcceleratorAttributesResponse(BaseModel):
    AcceleratorAttributes: Optional[CustomRoutingAcceleratorAttributes] = None


class UpdateCustomRoutingAcceleratorResponse(BaseModel):
    Accelerator: Optional[CustomRoutingAccelerator] = None


class UpdateCustomRoutingListenerResponse(BaseModel):
    Listener: Optional[CustomRoutingListener] = None


class UpdateEndpointGroupRequest(BaseModel):
    EndpointConfigurations_1: Optional[EndpointConfigurations] = Field(
        None, alias='EndpointConfigurations'
    )
    EndpointGroupArn: GenericString
    HealthCheckIntervalSeconds_1: Optional[HealthCheckIntervalSeconds] = Field(
        None, alias='HealthCheckIntervalSeconds'
    )
    HealthCheckPath_1: Optional[HealthCheckPath] = Field(None, alias='HealthCheckPath')
    HealthCheckPort_1: Optional[HealthCheckPort] = Field(None, alias='HealthCheckPort')
    HealthCheckProtocol_1: Optional[HealthCheckProtocol] = Field(
        None, alias='HealthCheckProtocol'
    )
    PortOverrides_1: Optional[PortOverrides] = Field(None, alias='PortOverrides')
    ThresholdCount_1: Optional[ThresholdCount] = Field(None, alias='ThresholdCount')
    TrafficDialPercentage_1: Optional[TrafficDialPercentage] = Field(
        None, alias='TrafficDialPercentage'
    )


class UpdateEndpointGroupResponse(BaseModel):
    EndpointGroup_1: Optional[EndpointGroup] = Field(None, alias='EndpointGroup')


class UpdateListenerResponse(BaseModel):
    Listener_1: Optional[Listener] = Field(None, alias='Listener')


class Accelerator(BaseModel):
    AcceleratorArn: Optional[GenericString] = None
    CreatedTime: Optional[Timestamp] = None
    DnsName: Optional[GenericString] = None
    DualStackDnsName: Optional[GenericString] = None
    Enabled: Optional[GenericBoolean] = None
    Events: Optional[AcceleratorEvents] = None
    IpAddressType_1: Optional[IpAddressType] = Field(None, alias='IpAddressType')
    IpSets_1: Optional[IpSets] = Field(None, alias='IpSets')
    LastModifiedTime: Optional[Timestamp] = None
    Name: Optional[GenericString] = None
    Status: Optional[AcceleratorStatus] = None


class Accelerators(RootModel[List[Accelerator]]):
    root: List[Accelerator]


class AddCustomRoutingEndpointsRequest(BaseModel):
    EndpointConfigurations: CustomRoutingEndpointConfigurations
    EndpointGroupArn: GenericString


class AddCustomRoutingEndpointsResponse(BaseModel):
    EndpointDescriptions: Optional[CustomRoutingEndpointDescriptions] = None
    EndpointGroupArn: Optional[GenericString] = None


class AddEndpointsRequest(BaseModel):
    EndpointConfigurations_1: EndpointConfigurations = Field(
        ..., alias='EndpointConfigurations'
    )
    EndpointGroupArn: GenericString


class AddEndpointsResponse(BaseModel):
    EndpointDescriptions_1: Optional[EndpointDescriptions] = Field(
        None, alias='EndpointDescriptions'
    )
    EndpointGroupArn: Optional[GenericString] = None


class AllowCustomRoutingTrafficRequest(BaseModel):
    AllowAllTrafficToEndpoint: Optional[GenericBoolean] = None
    DestinationAddresses_1: Optional[DestinationAddresses] = Field(
        None, alias='DestinationAddresses'
    )
    DestinationPorts_1: Optional[DestinationPorts] = Field(
        None, alias='DestinationPorts'
    )
    EndpointGroupArn: GenericString
    EndpointId: GenericString


class ByoipCidr(BaseModel):
    Cidr: Optional[GenericString] = None
    Events: Optional[ByoipCidrEvents] = None
    State: Optional[ByoipCidrState] = None


class ByoipCidrs(RootModel[List[ByoipCidr]]):
    root: List[ByoipCidr]


class CreateAcceleratorRequest(BaseModel):
    Enabled: Optional[GenericBoolean] = None
    IdempotencyToken_1: IdempotencyToken = Field(..., alias='IdempotencyToken')
    IpAddressType_1: Optional[IpAddressType] = Field(None, alias='IpAddressType')
    IpAddresses_1: Optional[IpAddresses] = Field(None, alias='IpAddresses')
    Name: GenericString
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class CreateAcceleratorResponse(BaseModel):
    Accelerator_1: Optional[Accelerator] = Field(None, alias='Accelerator')


class CreateCustomRoutingAcceleratorRequest(BaseModel):
    Enabled: Optional[GenericBoolean] = None
    IdempotencyToken_1: IdempotencyToken = Field(..., alias='IdempotencyToken')
    IpAddressType_1: Optional[IpAddressType] = Field(None, alias='IpAddressType')
    IpAddresses_1: Optional[IpAddresses] = Field(None, alias='IpAddresses')
    Name: GenericString
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class CreateCustomRoutingAcceleratorResponse(BaseModel):
    Accelerator: Optional[CustomRoutingAccelerator] = None


class CreateCustomRoutingEndpointGroupRequest(BaseModel):
    DestinationConfigurations: CustomRoutingDestinationConfigurations
    EndpointGroupRegion: GenericString
    IdempotencyToken_1: IdempotencyToken = Field(..., alias='IdempotencyToken')
    ListenerArn: GenericString


class CreateCustomRoutingEndpointGroupResponse(BaseModel):
    EndpointGroup: Optional[CustomRoutingEndpointGroup] = None


class CreateCustomRoutingListenerResponse(BaseModel):
    Listener: Optional[CustomRoutingListener] = None


class CreateEndpointGroupRequest(BaseModel):
    EndpointConfigurations_1: Optional[EndpointConfigurations] = Field(
        None, alias='EndpointConfigurations'
    )
    EndpointGroupRegion: GenericString
    HealthCheckIntervalSeconds_1: Optional[HealthCheckIntervalSeconds] = Field(
        None, alias='HealthCheckIntervalSeconds'
    )
    HealthCheckPath_1: Optional[HealthCheckPath] = Field(None, alias='HealthCheckPath')
    HealthCheckPort_1: Optional[HealthCheckPort] = Field(None, alias='HealthCheckPort')
    HealthCheckProtocol_1: Optional[HealthCheckProtocol] = Field(
        None, alias='HealthCheckProtocol'
    )
    IdempotencyToken_1: IdempotencyToken = Field(..., alias='IdempotencyToken')
    ListenerArn: GenericString
    PortOverrides_1: Optional[PortOverrides] = Field(None, alias='PortOverrides')
    ThresholdCount_1: Optional[ThresholdCount] = Field(None, alias='ThresholdCount')
    TrafficDialPercentage_1: Optional[TrafficDialPercentage] = Field(
        None, alias='TrafficDialPercentage'
    )


class CreateEndpointGroupResponse(BaseModel):
    EndpointGroup_1: Optional[EndpointGroup] = Field(None, alias='EndpointGroup')


class CreateListenerResponse(BaseModel):
    Listener_1: Optional[Listener] = Field(None, alias='Listener')


class DenyCustomRoutingTrafficRequest(BaseModel):
    DenyAllTrafficToEndpoint: Optional[GenericBoolean] = None
    DestinationAddresses_1: Optional[DestinationAddresses] = Field(
        None, alias='DestinationAddresses'
    )
    DestinationPorts_1: Optional[DestinationPorts] = Field(
        None, alias='DestinationPorts'
    )
    EndpointGroupArn: GenericString
    EndpointId: GenericString


class DeprovisionByoipCidrResponse(BaseModel):
    ByoipCidr_1: Optional[ByoipCidr] = Field(None, alias='ByoipCidr')


class DescribeAcceleratorResponse(BaseModel):
    Accelerator_1: Optional[Accelerator] = Field(None, alias='Accelerator')


class DescribeEndpointGroupResponse(BaseModel):
    EndpointGroup_1: Optional[EndpointGroup] = Field(None, alias='EndpointGroup')


class DescribeListenerResponse(BaseModel):
    Listener_1: Optional[Listener] = Field(None, alias='Listener')


class ListAcceleratorsResponse(BaseModel):
    Accelerators_1: Optional[Accelerators] = Field(None, alias='Accelerators')
    NextToken: Optional[GenericString] = None


class ListByoipCidrsResponse(BaseModel):
    ByoipCidrs_1: Optional[ByoipCidrs] = Field(None, alias='ByoipCidrs')
    NextToken: Optional[GenericString] = None


class ListCustomRoutingPortMappingsResponse(BaseModel):
    NextToken: Optional[GenericString] = None
    PortMappings_1: Optional[PortMappings] = Field(None, alias='PortMappings')


class ListListenersResponse(BaseModel):
    Listeners_1: Optional[Listeners] = Field(None, alias='Listeners')
    NextToken: Optional[GenericString] = None


class ListTagsForResourceResponse(BaseModel):
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class ProvisionByoipCidrResponse(BaseModel):
    ByoipCidr_1: Optional[ByoipCidr] = Field(None, alias='ByoipCidr')


class TagResourceRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')
    Tags_1: Tags = Field(..., alias='Tags')


class UpdateAcceleratorResponse(BaseModel):
    Accelerator_1: Optional[Accelerator] = Field(None, alias='Accelerator')


class WithdrawByoipCidrResponse(BaseModel):
    ByoipCidr_1: Optional[ByoipCidr] = Field(None, alias='ByoipCidr')


class AdvertiseByoipCidrResponse(BaseModel):
    ByoipCidr_1: Optional[ByoipCidr] = Field(None, alias='ByoipCidr')
